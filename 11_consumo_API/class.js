/* 1 API REST:
API REST üåê
API: Application Program Interface -> Interfaz
Una interfaz es el medio por el cual la computadora se conecta con los humanos. Es lo visible para el usuario que interact√∫e con una app, por ejemplo.

API REST
Es el medio por el cual se comunican computadoras con otras computadoras. O tambi√©n podemos pensarlo como robots con robots ü§ñüîÅü§ñ. Puede ser backend con frontend, backend con backend, etc.

REST: Representational State Transfer

A diferencia de una p√°gina web, que se muestra con im√°genes, textos formateados, etc.; la llamada de una API REST se devuelve en un archivo JSON.

Aunque pocas, algunas aplicaciones todav√≠a usan el m√©todo SOAP para mandar informaci√≥n entre computadoras. Sin embargo, actualmente REST est√° dominando su aplicaci√≥n.
*/
/* 2 Flujo de comunicaci√≥n 

üë®‚Äçüíª Cuando tenemos una aplicaci√≥n que recibe el HTML una sola vez, JavaScript se encargara de sobreescribirlo segun la interacci√≥n del usuario y los datos recibidos del backend (por medio de la API) y a esto se le llama:

SPA (Single Page Aplication) - Aplicaci√≥n de una sola pagina.

Y ya que estas aplicaciones solo te regresan una pagina, todo el renderizado sucede en el navegador gracias a JS, a esto se le llama:
Server Side Rendering

*/
/* 3 Consumo de API REST



*/
/* 5 HTTP Status codes

1XX Respuestas Afirmativas

2XX Respuestas satisfactorias

3XX Re-direcciones

4XX Error del cliente

5XX Error de servidor

*/
/* 6 API KEY

API KEY
Son una, no la √∫nica, de las formas en que el backend puede identificar quien est√° haciendo cada solicitud.

Debemos entender dos conceptos importantes, la Autenticaci√≥n y la Autorizaci√≥n.

AUTENTICACI√ìN
Consiste en identificar quien es cada quien. No sabe que permisos tiene fulano, No sabe que puede o no hacer fulano, Solamente sabe que √©l es fulano, que ella es pamela o que esa es una persona sin identificar.

AUTORIZACI√ìN
Es la que nos dice que permisos tiene cada quien, es decir, si fulano quiere ir a la nevera para comerse un pastel, es la que dice, esp√©rate fulano, tienes permisos para abrir la nevera?, a listo √°brela, tienes permisos de comerte el pastel?, a bueno com√©telo.

Y adem√°s por poner un ejemplo m√°s real, si fulano trata de ver las fotos privadas de pamela, la autorizaci√≥n va a decir, ok quien eres?, la autenticaci√≥n ya te dijo que eras fulano, a listo perfecto, autenticaci√≥n me pasas un token, listo ya s√© que tu eres fulano, y luego empieza a revisar los permisos, como no los tiene se lo va a prohibir,

Obviamente estos trabajan en conjunto para prohibir o permitir a toda la informaci√≥n que tenemos en nuestra aplicaci√≥n, y ah√≠ es donde entran las API KEYs.

Estas API Keys son una de las formas en que el backend puede indentificar quien es cada quien.

El backend necesita saber quien esta haciendo cada solicitud, para proteger la informaci√≥n privada de las personas, pero tambi√©n en muchos casos, para limitar la cantidad o las solicitudes que le hacemos a la aplicaci√≥n.

Para que nosotros podamos enviarle esta API KEY en cada solicitud que hagamos al backend podemos utilizar varias formas:

Query parameter: 
    ?apy_key=ABC123
Authorization Header: 
    X-API-Key: ABC123

ALTERNATIVAS

Authorization: Basic

Authorization: Barer Token

OAuth 2.0 (es de las mejores y m√°s complicadas formas de autenticar en la modernidad)

Access Key + Secret Key
    En este caso estamos haciendo una:
    Application-based authentication

es decir estamos autenticando nuestra aplicaci√≥n, estamos autenticando a nuestro frontend para que pueda hacer solicitudes al backend, pero hay aplicaciones donde no solamente necesitamos una Application-based authentication, tambi√©n hay apps que necesitamos usar esta con una User-based authentication

*/
/* 7 Maquetaci√≥n del proyecto

*/
/* 8 M√®todos HTTP

HTTP Methods

GET Lee datos del server (Solo Lectura)

HEAD Recupera datos de los headers (Solo Lectura)

POST Env√≠a datos al server

PUT/PATCH Salva datos en el server

DELETE Borra datos del server

*/
/* 9 GET



*/
/* 11 Manipulaci√≥n dinamica del DOM



*/
/* 13 Headers

¬øQu√© son los Headers HTTP?
Los headers HTTP son par√°metros que se env√≠an en una transacci√≥n HTTP, que contienen informaci√≥n del estado de la transacci√≥n en curso.

Cuando un cliente solicita informaci√≥n a un servidor, este puede pasarle informaci√≥n adicional en el header de la solicitud. informaci√≥n del tipo de datos que se esperan recibir, del tipo de datos que env√≠an, informaci√≥n de autenticaci√≥n etc.

De la misma forma el servidor puede incluir estos headers en las respuestas para mostrar informaci√≥n del estado de la solicitud.(HTTP Status Codes)

Estos pueden ser separados en varios grupos:

-------------------------------------------------------------
Request Headers
Pasan informaci√≥n de la solicitud. Contienen informaci√≥n sobre el recurso solicitado e informaci√≥n del cliente que la solicita.

URL a la que se le hace la solicitud, detalles de autenticaci√≥n o pol√≠ticas de cache

Estos pueden ser:

Accept: 
    Informan al servidor el tipo de datos que el cliente puede entender

Accept: text/html
Accept: application/xhtml+xml
Accept: image/png

Accept-Encoding: 
    Env√≠an informaci√≥n sobre el tipo de codificaci√≥n que el cliente puede entender

Accept-Encoding: gzip
Accept-Encoding: gzip, compress

Authorization: 
    sirve para pasar credenciales que le servir√°n al servidor determinar si el cliente tiene acceso a ciertos recursos

Authorization: Basic 
Authorization: Bearer 

Accept-Language: 
    Permite saber al servidor que tipo lenguaje es entendido por el cliente logrando entender que configuraci√≥n local es viable enviar. Por ejemplo: los horarios, fechas, medidas, etc.

Accept-Language: fr-CH
Accept-Language: en-US

Cache-Control: 
    contiene informaci√≥n sobre el control de la cache por parte del cliente y del servidor.

Cache-Control: stale-while-revalidate=60
Cache-Control: no-cache

-------------------------------------------------------------

Response Headers
As√≠ como los request headers contienen informaci√≥n del cliente, los response headers contienen informaci√≥n del servidor al que se le hace la petici√≥n.

En realidad todos los headers enviados en un respuesta del servidor pueden ser llamados de esta manera.

Age: 
    Contienen informaci√≥n del tiempo que un objeto estuvo en cach√©. Se representa en segundos. Si es 0(cero) significa que la solicitud se obtuvo del servidor de origen. Sino se calcula como la diferencia entre el Date del proxy y el date enviado por la respuesta original.

    Age: 24

Server: 
    Describen el software usado por el servidor que manej√≥ la solicitud. Es decir el que gener√≥ la respuesta.

    Hay que tener en cuenta que hay que evitar demasiado detalle en estas respuesta ya que sino se estar√≠a enviando informaci√≥n que podr√≠an utilizar los atacantes(por ejemplo la versi√≥n del sistema operativo que utiliza el servidor). Se utiliza por ejemplo para exponer la versi√≥n de apache utilizada,

    Server: Apache/2.4.1 (Unix)

Location: 
    indica la URL a la que redirigir una p√°gina. Solo proporciona un significado cuando se sirve con una respuesta de estado 3xx (redireccionamiento) o 201 (creado).

-------------------------------------------------------------

Representation Headers
Contienen informaci√≥n acerca del body de la solicitud, enviado en una respuesta o (en un POST)

Content-type: 
    Indica el tipo de contenido (formato de archivo) es enviado en una solicitud.

    ejemplo: Content-Type: text/html; charset=UTF-8

Content-Enconding: 
    Contienen la informaci√≥n necesaria para decodificar un archivo a su formato original.

Content-Encoding: compress
Content-Encoding: gzip

Content-Languaje: 
    Indica el lenguaje para los cuales es m√°s relevante el contenido de una p√°gina, de modo que los usuarios puedan diferenciarlos seg√∫n su propio idioma preferido.

Content-Language: en-US
Content-Language: en-CA

Content-Location: 
    Indican un URL o direcci√≥n alternativa para la respuesta. A diferencia de Location (en Request Headers). Este indica la url directa que puede ser utilizada para acceder al recurso. Mientras Location esta asociada la respuesta en si, content-location esta asociada a los datos devueltos.

Por ejemplo: Si una api puede devolver datos en los formatos JSON, XML o CSV y su ruta se encuentra en https://ejemplo.com/documents/archivo.

El sitio podr√≠a retornan distintas url dependiendo del par√°metro Accept pasado en la solicitud.

Request header	                   Response header

Accept:                             Content-Location:
application/json,                   /documents/foo.json
text/json	
    
Accept: 
application/xml,        	        Content-Location: 
text/xml                            /documents/foo.xml

Accept: 
text/plain,                 	    Content-Location: 
text/*                              /documents/foo.txt

-------------------------------------------------------------

Payload Headers
contiene informaci√≥n acerca de la carga de la respuesta. Lenght, Enconding, Range.

Content-Lenght: 
    Indica el tama√±o del body del mensaje en bytes

    Content-Length: 3495

Content-Range: 
    Indica la posici√≥n a la que pertenece una porci√≥n del mensaje respecto al body.

Content-Range: 
    <unit> <range-start>-<range-end>/<size>

Content-Range: 
    bytes 200-1000/67589


*/
/* */
